{"version":3,"sources":["./src/environments/environment.ts","./src/app/visualizer/models/algorithms/pathfinding/dijkstrasAlghorithm.ts","./src/app/visualizer/components/board/board.component.ts","./src/app/visualizer/components/board/board.component.html","./src/app/visualizer/models/board.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/visualizer/visualizer.component.ts","./src/app/visualizer/visualizer.component.html","./src/app/visualizer/models/node.ts","./src/app/visualizer/components/board/board.animations.ts","./src/app/visualizer/visualizer.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Board } from \"../../board\";\r\nimport { Node } from \"../../node\";\r\n\r\nexport class DijkstrasAlgorithm {\r\n\r\n    private static NO_PARENT: number = -1;\r\n\r\n    public static calculatePath(board: Board, sourceIndex: number, targetIndex: number): number { \r\n        let nodes = board.getNodeList();\r\n        let shortestDistances: number[] = new Array(nodes.length);\r\n        let added: boolean[] = new Array(nodes.length);\r\n        \r\n        for (let i = 0; i < nodes.length; i++) {\r\n            shortestDistances[i] = Number.POSITIVE_INFINITY;\r\n            added[i] = false;\r\n        }\r\n\r\n        shortestDistances[sourceIndex] = 0;\r\n\r\n        let parents: number[] = new Array(nodes.length);\r\n        parents[sourceIndex] = DijkstrasAlgorithm.NO_PARENT;\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            let nearestNodeIndex: number = -1;\r\n            let shortestDistance: number = Number.POSITIVE_INFINITY;\r\n            \r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if(!added[i] && shortestDistances[i] < shortestDistance) {\r\n                    shortestDistance = shortestDistances[i];\r\n                    nearestNodeIndex = i;\r\n                }\r\n            }\r\n\r\n            added[nearestNodeIndex] = true;\r\n            if (nearestNodeIndex != sourceIndex && nearestNodeIndex != targetIndex) {\r\n                nodes[nearestNodeIndex].type = 'checked';\r\n            }\r\n            if (nearestNodeIndex == targetIndex) {\r\n                DijkstrasAlgorithm.setPath(nodes, targetIndex, parents)\r\n                return shortestDistances[targetIndex];\r\n            }\r\n\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                let edgeWeight: number = board.getEdgeWeight(nodes[nearestNodeIndex], nodes[i]);\r\n\r\n                if (edgeWeight > 0 && ((shortestDistance + edgeWeight) < shortestDistances[i])) {\r\n                    parents[i] = nearestNodeIndex;\r\n                    shortestDistances[i] = shortestDistance + edgeWeight;\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    private static setPath(nodes: Node[], targetIndex: number, parents: number[]): void {\r\n        let list: Node[] = new Array();\r\n        let newIndex = targetIndex;\r\n        while(parents[newIndex] != DijkstrasAlgorithm.NO_PARENT) {\r\n            let node = nodes[parents[newIndex]];\r\n            list.push(node);\r\n            newIndex = parents[newIndex];\r\n        }\r\n\r\n        list.pop();\r\n        list = list.reverse();\r\n        list.forEach(element => {\r\n            element.type = 'path';\r\n        });\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { DijkstrasAlgorithm } from '../../models/algorithms/pathfinding/dijkstrasAlghorithm';\nimport { Board } from '../../models/board';\nimport { Node } from '../../models/node';\nimport { BoardAnimations } from './board.animations';\n\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss'],\n  animations: [BoardAnimations.nodeType]\n})\nexport class BoardComponent implements OnInit {\n  board = new Board(40, 17);\n\n  dragActive: 'false' | 'initial' | 'destination' | 'clear' | 'block' = 'false';\n  pathCalculated: boolean = false;\n  animationsDisabled: boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  visualize(): void {\n    this.board.clearPath();\n    console.log(DijkstrasAlgorithm.calculatePath(this.board, this.board.getNodeList().indexOf(this.board.getInitalNode()), this.board.getNodeList().indexOf(this.board.getDestinationNode())));\n    this.pathCalculated = true;\n    this.animationsDisabled = true;\n  }\n\n  clearBoard() {\n    this.board.clearBoard();\n    this.pathCalculated = false;\n  }\n\n  clearPath() {\n    this.board.clearPath();\n    this.pathCalculated = false;\n  }\n\n  toggleDiagonalEdges() {\n    this.board.diagonalEdges = !this.board.diagonalEdges;\n    if(this.pathCalculated)\n      this.visualize();\n  }\n\n  contextMenuDisable(event: MouseEvent) {\n    event.preventDefault();\n  }\n\n  onMouseDown(event: MouseEvent, node: Node) {\n    event.preventDefault();\n    if(event.buttons == 1){\n      if(node.type == 'initial')\n        this.dragActive = 'initial'\n      else if(node.type == 'destination')\n        this.dragActive = 'destination'\n      else if(node.type == 'open' && !this.pathCalculated) {\n        node.setWall();\n        this.dragActive = \"block\";\n      }\n    }   \n    else if(event.buttons == 2 && node.type == 'wall' && !this.pathCalculated) {\n      node.clearWall();\n      this.dragActive = 'clear';\n    }\n  }\n\n  onMouseMove(event: MouseEvent, node: Node) {\n    event.preventDefault();\n    switch(this.dragActive) {\n      case 'false': break;\n\n      case 'initial': \n        if(node.type != 'destination' && node.type != 'wall') {\n          this.board.setInitialNode(node.x, node.y);\n          if (this.pathCalculated)\n            this.visualize();\n        }\n        else\n          this.dragActive = 'false';\n        break;\n\n      case 'destination':\n        if(node.type != 'initial' && node.type != 'wall') {\n          this.board.setDestinationNode(node.x, node.y);\n          if (this.pathCalculated)\n            this.visualize()\n        }\n        else\n          this.dragActive = 'false';\n        break;\n\n      case 'block':\n        if(event.buttons == 1 && node.type == 'open')\n          node.setWall();\n        break;\n        \n      case 'clear':\n        if(event.buttons == 2 && node.type == 'wall')\n          node.clearWall();\n        break;\n    }\n  }\n\n  onMouseUp(event: MouseEvent, node: Node) {\n    event.preventDefault();\n    if (this.dragActive != 'false'){\n      this.dragActive = 'false'\n\n    }\n\n  }\n\n  onMouseLeave() {\n    this.dragActive = 'false';\n  }\n\n\n}\n","<div class=\"bar\" id=\"nav-bar\">\n    <div (click)=\"visualize()\" class=\"btn board-btn\" id=\"run-btn\">Run Algorithm</div>\n    <div (click)=\"clearBoard()\" class=\"btn board-btn\">Clear Board</div>\n    <div (click)=\"clearPath()\" class=\"btn board-btn\">Clear Path</div>\n    <div class=\"checkbox\">\n        <input type=\"checkbox\" id=\"diagonal\" name=\"diagonal\" checked (click)=\"toggleDiagonalEdges()\">\n        <label for=\"diagonal\">Diagonal edges</label>\n    </div>\n</div>\n<div class=\"bar\" id=\"legend-bar\">\n    <div class=\"legend-element\"><div class=\"legend-tile legend-tile-open\"></div>Open</div>\n    <div class=\"legend-element\"><div class=\"legend-tile legend-tile-wall\"></div>Wall</div>\n    <div class=\"legend-element\"><div class=\"legend-tile legend-tile-initial\"></div>Initial</div>\n    <div class=\"legend-element\"><div class=\"legend-tile legend-tile-destination\"></div>Destination</div>\n    <div class=\"legend-element\"><div class=\"legend-tile legend-tile-checked\"></div>Checked</div>\n    <div class=\"legend-element\"><div class=\"legend-tile legend-tile-path\"></div>Path</div>\n</div>\n\n<table (mouseleave)=\"onMouseLeave()\" (contextmenu)=\"contextMenuDisable($event)\">\n    <tr *ngFor=\"let row of board.nodes; index as y;\">\n        <td *ngFor=\"let node of row; index as x\">\n            <div class=\"node\" [@.disabled]=\"animationsDisabled\"\n            [@nodeType]=\"node.type\"\n            \n            (mousedown)=\"onMouseDown($event, node)\" (mousemove)=\"onMouseMove($event, node)\" (mouseup)=\"onMouseUp($event, node)\">\n            </div>\n        </td>\n    </tr>\n</table>\n\n<div class=\"bar\">\n    Right mouse button - place wall : Left mouse button - clear wall <br>\n    Initial and Destination nodes can be moved using right mouse button\n</div>\n","import { Node } from \"./node\";\r\n\r\nexport class Board {\r\n    nodes: Node[][] = [];\r\n    diagonalEdges: boolean = true;\r\n    initialNodeCoords: {x: number, y:number};\r\n    destinationNodeCoords: {x: number, y:number};\r\n\r\n    constructor(public width: number, public height: number) {\r\n        for (let y = 0; y < this.height; y++) {\r\n            this.nodes[y] = [];\r\n            for (let x = 0; x < this.width; x++) {\r\n                this.nodes[y][x] = new Node(x, y);\r\n            }\r\n        }\r\n\r\n        this.initialNodeCoords = { x: Math.floor(Math.random() * width), y: Math.floor(Math.random() * height)};        \r\n        do {\r\n            this.destinationNodeCoords = { x: Math.floor(Math.random() * width), y: Math.floor(Math.random() * height)};\r\n        } while (this.initialNodeCoords.x == this.destinationNodeCoords.x && this.initialNodeCoords.y == this.destinationNodeCoords.y);\r\n\r\n        this.setInitialNode(this.initialNodeCoords.x, this.initialNodeCoords.y);\r\n        this.setDestinationNode(this.destinationNodeCoords.x, this.destinationNodeCoords.y);\r\n\r\n\r\n    }\r\n    \r\n    getNode(x: number, y: number): Node {\r\n        return this.nodes[y][x];\r\n    }\r\n\r\n    getNodeList(): Node[] {\r\n        let list: Node[] = new Array() \r\n        for (let y = 0; y < this.height; y++) \r\n            for (let x = 0; x < this.width; x++) \r\n                list.push(this.nodes[y][x]);\r\n        return list;\r\n    }\r\n\r\n    clearBoard(): void {\r\n        for (let y = 0; y < this.height; y++) \r\n            for (let x = 0; x < this.width; x++)\r\n                this.nodes[y][x].type = 'open';\r\n\r\n        this.getInitalNode().type = 'initial';\r\n        this.getDestinationNode().type = 'destination';\r\n    }\r\n\r\n    clearPath(): void {\r\n        this.getNodeList().forEach(node => {\r\n            if(node.type == 'path' || node.type == 'checked')\r\n                node.type = 'open';\r\n        });\r\n    }\r\n\r\n    getInitalNode(): Node {\r\n        return this.getNode(this.initialNodeCoords.x, this.initialNodeCoords.y);\r\n    }\r\n\r\n    getDestinationNode(): Node {\r\n        return this.getNode(this.destinationNodeCoords.x, this.destinationNodeCoords.y);\r\n    }\r\n\r\n    setInitialNode(x: number, y: number) {\r\n        this.getNode(this.initialNodeCoords.x, this.initialNodeCoords.y).type = 'open';\r\n        this.initialNodeCoords = {x: x, y: y};\r\n        this.getNode(x, y).type = 'initial';\r\n    }\r\n\r\n    setDestinationNode(x: number, y: number) {\r\n        this.getNode(this.destinationNodeCoords.x, this.destinationNodeCoords.y).type = 'open';\r\n        this.destinationNodeCoords = {x: x, y: y};\r\n        this.getNode(x, y).type = 'destination';\r\n    }\r\n\r\n    getEdgeWeight(node1: Node, node2: Node): number {\r\n        if (node1.type == 'wall' || node2.type == 'wall') return 0;\r\n\r\n        let deltaX = node1.x - node2.x;\r\n        let deltaY = node1.y - node2.y;\r\n        \r\n        if (deltaX == 0 && (deltaY == -1 || deltaY == 1)) return 1;\r\n\r\n        if (deltaY == 0 && (deltaX == -1 || deltaX == 1)) return 1;\r\n\r\n        //right now if there are walls placed diagonally crossing the potential path algorithm still will go through \r\n        if (this.diagonalEdges && (deltaX == -1 || deltaX == 1) && (deltaY == -1 || deltaY == 1)) return 1.4142;\r\n\r\n        return 0;\r\n    }\r\n\r\n    \r\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'pathfinding-visualizer';\n}\n","<app-visualizer></app-visualizer>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { VisualizerModule } from './visualizer/visualizer.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    VisualizerModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-visualizer',\n  templateUrl: './visualizer.component.html',\n  styleUrls: ['./visualizer.component.scss']\n})\nexport class VisualizerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-board></app-board>","export class Node {\r\n    type: 'open'| 'checked' | 'path' | 'wall' | 'initial' | 'destination' = 'open';\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    setWall() {\r\n        if (this.type == 'open')\r\n            this.type = 'wall';\r\n    }\r\n\r\n    clearWall() {\r\n        if (this.type == 'wall')\r\n        this.type = 'open';\r\n    }\r\n}","import { style, animate, trigger, transition, state } from '@angular/animations';\r\n\r\nexport const BoardAnimations = {\r\n  nodeType: trigger('nodeType', [\r\n    state('open', style({\r\n        backgroundColor: 'rgb(200, 209, 223)'\r\n    })),\r\n    state('checked', style({\r\n        backgroundColor: 'rgb(138, 163, 204)'\r\n    })),\r\n    state('path', style({\r\n        backgroundColor: 'rgb(178, 224, 92)'\r\n    })),\r\n    state('wall', style({\r\n        backgroundColor: 'rgb(25, 68, 133)'\r\n    })),\r\n    state('initial', style({\r\n        backgroundColor: 'rgb(13, 99, 25)'\r\n    })),\r\n    state('destination', style({\r\n        backgroundColor: 'rgb(150, 10, 10)'\r\n    })),\r\n    /*\r\n    transition('initial <=> *', [\r\n      animate(0)\r\n    ]),\r\n    transition('destination <=> *', [\r\n      animate(0)\r\n    ]),\r\n    transition('open => checked', [\r\n      animate(500)\r\n    ]),\r\n    transition('checked => *', [\r\n      animate(0)\r\n    ]),\r\n    transition('path=> *', [\r\n      animate(0)\r\n    ]),\r\n    transition('void => *', [\r\n      animate(0)\r\n    ]),*/\r\n    transition('* => *', [\r\n      animate(0)\r\n    ]),\r\n  ]),    \r\n};","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BoardComponent } from './components/board/board.component';\nimport { VisualizerComponent } from './visualizer.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\n@NgModule({\n  declarations: [\n    BoardComponent,\n    VisualizerComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    BrowserAnimationsModule\n  ],\n  exports: [\n    VisualizerComponent\n  ]\n})\nexport class VisualizerModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}